{"version":3,"sources":["Context/todos.js","Components/Todo/FormAddTodo.js","Components/Todo/EditTodo.js","Components/Todo/Todo.js","Components/Todo/TodoList.js","Components/App.js","serviceWorker.js","index.js"],"names":["todosContext","React","createContext","todos","add","edit","done","delete","FormAddTodo","props","useState","text","setText","useContext","TodosContext","className","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","inputHandler","EditTodo","onClick","Todo","item","setEdit","key","TodoList","statusDone","setStatusDone","filterTodos","filter","id","length","map","App","state","this","setState","prevState","Date","now","find","newTodos","Provider","addTodo","bind","toggleTodo","deleteTodo","editTodo","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56872b85.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst todosContext = React.createContext({\r\n    todos : [],\r\n    add : () => {},\r\n    edit : () => {},\r\n    done : () => {},\r\n    delete : () => {}\r\n})\r\n\r\nexport default todosContext;","import React , { useState , useContext } from 'react'\r\nimport TodosContext from './../../Context/todos';\r\n\r\n\r\nfunction FormAddTodo(props) {\r\n\r\n    const [ text , setText ] = useState('');\r\n    const todosContext = useContext(TodosContext);\r\n\r\n    let formHandler = e => {\r\n        e.preventDefault();\r\n          if (text === \"\") {\r\n\r\n            alert(\"لطفا فیلد را پر کنید.\");\r\n          }else{\r\n            todosContext.add(text);\r\n            setText('');\r\n          }\r\n        \r\n    }\r\n\r\n    let inputHandler = e => {\r\n            setText(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <form className=\"form-inline\" onSubmit={formHandler}>\r\n            <div className=\"form-group\">\r\n            <input type=\"text\" className=\"form-control w-100\" placeholder=\" کار های خود را وارد کنید\" value={text} onChange={(e) => inputHandler(e)}/>\r\n            \r\n                <button type=\"submit\" className=\"btn btn-info mt-4 w-100\" >اضافه کردن</button>\r\n     \r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default FormAddTodo;","import React , { useState } from 'react'\r\n\r\n\r\nfunction EditTodo(props) {\r\n\r\n    const [text , setText ] = useState(props.text)\r\n    \r\n    let inputHandler = e => setText(e.target.value);\r\n\r\n\r\n    return (\r\n        <div className=\"col-6 mb-2\">\r\n            <div className=\"d-flex justify-content-between align-items-center border rounded p-3\">\r\n                <div>\r\n                    <input value={text} onChange={inputHandler} className=\"form-control\"/>\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" className=\"btn btn-primary btn-sm mr-1\" onClick={() => props.edit(text)}>اعمال ویرایش</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default EditTodo;","import React , { useState , useContext } from 'react'\r\nimport EditTodo from './EditTodo';\r\nimport TodosContext from '../../Context/todos';\r\n\r\n\r\nfunction Todo(props) {\r\n\r\n    const { item } = props;\r\n\r\n    const [ edit , setEdit ] = useState(false);\r\n    const todosContext = useContext(TodosContext);\r\n    \r\n    let editHandler = text => {\r\n        todosContext.edit(item.key,text);\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                ! edit\r\n                    ? (\r\n                        <div className=\"col-6 mb-2\">\r\n                            <div className=\"d-flex justify-content-between align-items-center border rounded p-3\">\r\n                                <div>\r\n                                    {item.text}\r\n                                </div>\r\n                                <div>\r\n                                    <button type=\"button\" className={`btn btn-sm ml-1 ${ !item.done ? 'btn-success' : 'btn-warning'}`} onClick={() => todosContext.done(item.key)}>{ item.done ? 'انجام نشده' : 'انجام شد'}</button>\r\n                                    <button type=\"button\" className=\"btn btn-primary btn-sm ml-1\" onClick={() => setEdit(true)}>ویرایش</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger btn-sm\" onClick={() => todosContext.delete(item.key)}>حذف</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )  \r\n                    \r\n                    : <EditTodo text={item.text} edit={editHandler}/> \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Todo;","import React , { useState  , useContext} from 'react';\r\n\r\nimport Todo from './Todo';\r\nimport TodosContext from './../../Context/todos';\r\n\r\nfunction TodoList(props) {\r\n\r\n    const [ statusDone , setStatusDone ] = useState(false);\r\n    const todosContext = useContext(TodosContext);\r\n\r\n    let { todos } = todosContext;\r\n\r\n    let filterTodos = todos.filter(item => item.done === statusDone)\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"border-bottom col-6 d-flex justify-content-around mb-3 pb-3\">\r\n                    <a className={`nav-item nav-link font-weight-bold pointer px-5 ${ !statusDone ? 'avtive-1' : '' }`} id=\"nav-home-tab\" onClick={() => setStatusDone(false)}>انجام نشده <span className=\"badge badge-secondary\">{ todos.filter(item => item.done === false).length }</span></a>\r\n                <a className={`nav-item nav-link font-weight-bold pointer px-5 ${ statusDone ? 'avtive-1' : '' }`} id=\"nav-profile-tab\" onClick={() => setStatusDone(true) }>انجام شد <span className=\"badge badge-success\">{ todos.filter(item => item.done === true).length}</span></a>\r\n            </nav>\r\n            {\r\n\r\n            filterTodos.length === 0 \r\n                    ?   <p>لیستی موجود نیست</p>\r\n                    : filterTodos.map(item => <Todo key={item.key} item={item} /> )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList;","import React , { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport \"./../index.css\"\r\n// Import Components\r\nimport FormAddTodo from './Todo/FormAddTodo';\r\nimport TodoList from './Todo/TodoList';\r\n// impor Contexts\r\nimport TodosContext from './../Context/todos';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        todos : []\r\n    }\r\n\r\n\r\n    addTodo(text) {\r\n        this.setState(prevState => {\r\n            return {\r\n                todos : [\r\n                    ...prevState.todos,\r\n                    { key : Date.now() , done : false , text }\r\n                ]\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    deleteTodo(key) {\r\n        this.setState(prevState => {\r\n            return {\r\n                todos : prevState.todos.filter(item => item.key !== key)\r\n            }\r\n        })\r\n    }\r\n\r\n    editTodo(key , text) {\r\n        let { todos } = this.state;\r\n\r\n        let item = todos.find(item => item.key === key);\r\n        item.text = text ;\r\n         \r\n        //todohay qabli ham migreft ezafe mikard vaqti ti item ono grftimo taqir dadim bayad ono az list qabli pak konim\r\n        let newTodos = todos.filter(item => item.key !== key)\r\n\r\n        this.setState({\r\n            todos : [\r\n                ...newTodos,\r\n                item\r\n            ]\r\n        })\r\n    }\r\n    \r\n\r\n    toggleTodo(key) {\r\n        let { todos } = this.state;\r\n\r\n        let item = todos.find(item => item.key === key);\r\n        item.done = ! item.done ;\r\n\r\n        let newTodos = todos.filter(item => item.key !== key)\r\n\r\n        this.setState({\r\n            todos : [\r\n                ...newTodos,\r\n                item\r\n            ]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TodosContext.Provider value={{\r\n                todos: this.state.todos,\r\n                add : this.addTodo.bind(this),\r\n                done : this.toggleTodo.bind(this),\r\n                delete : this.deleteTodo.bind(this),\r\n                edit : this.editTodo.bind(this)\r\n            }}>\r\n                <div className=\"App\">\r\n                    <main>\r\n                        <section className=\"jumbotron\">\r\n                            <div className=\"container d-flex flex-column align-items-center\">\r\n                                <p className=\"lead text-muted text-block\">لیست کار ها</p>\r\n                                <FormAddTodo />\r\n                            </div>\r\n                        </section>\r\n                        <div className=\"todosList\">\r\n                                <div className=\"container\">\r\n                                    <div className=\"d-flex flex-column align-items-center \">\r\n                                        <TodoList />\r\n                                    </div>\r\n                                </div>\r\n                        </div>\r\n                    </main>\r\n                </div>\r\n            </TodosContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}